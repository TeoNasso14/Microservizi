trigger:
  branches:
    include:
      - main

variables:
  # Nome del Service Connection per il Docker Registry (in Project Settings ‚Üí Service connections)
  dockerRegistryServiceConnection: 'MyDockerRegistryConnection'
  # Indirizzo del tuo registry (es: docker.io/tuo-utente)
  dockerRegistry: 'docker.io/tuo-utente'
  # Tag usato per le immagini (Build ID)
  tag: '$(Build.BuildId)'
  # Variabili DB
  DB_NAME: 'exampledb'
  DB_USER: 'example_user'
  DB_PASSWORD: 'secret_password'
  DB_PORT: '5432'
  HIBERNATE_DDL_AUTO: 'update'

stages:

# Stage 1: Build & Test
- stage: Build
  displayName: 'üõ†Ô∏è Build & Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Compile JAR and Run Tests'
    pool:
      vmImage: 'ubuntu-latest'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: $(DB_NAME)
          POSTGRES_USER: $(DB_USER)
          POSTGRES_PASSWORD: $(DB_PASSWORD)
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $(DB_USER) -d $(DB_NAME)"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - checkout: self
      - task: Maven@3
        displayName: 'Set up JDK 17 & Run Tests'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'verify -DskipDockerBuild'
          options: '-U'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          publishJUnitResults: true

# Stage 2: Build & Push Docker Images
- stage: Docker
  displayName: 'üê≥ Build & Push Docker'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DockerBuildAndPush
    displayName: 'Build and Push Images'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
      - task: Docker@2
        displayName: 'Build & Push todo-service'
        inputs:
          command: buildAndPush
          repository: '$(dockerRegistry)/todo-service'
          dockerfile: 'todo-service/Dockerfile'
          containerRegistry: '$(dockerRegistryServiceConnection)'
          tags: |
            $(tag)
      # Se hai altri microservizi, aggiungi qui ulteriori Docker@2 tasks

# Stage 3: Deploy via SSH
- stage: Deploy
  displayName: 'üöÄ Deploy to Production'
  dependsOn: Docker
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    displayName: 'Deploy via SSH'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: SSH@0
              displayName: 'SSH and Deploy'
              inputs:
                sshEndpoint: 'MySSHEndpoint'   # Service Connection SSH
                runOptions: 'commands'
                commands: |
                  cd /path/to/your/project
                  export DB_NAME=$(DB_NAME)
                  export DB_USER=$(DB_USER)
                  export DB_PASSWORD=$(DB_PASSWORD)
                  export DB_HOST=db
                  export DB_PORT=$(DB_PORT)
                  export HIBERNATE_DDL_AUTO=$(HIBERNATE_DDL_AUTO)
                  docker-compose pull
                  docker-compose up -d --remove-orphans
